name: Cargo Build & Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  build:
    name: Zombienet SDK - latest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
          # - nightly
    steps:
      - uses: actions/checkout@v3

      - name: Init nigthly install for fmt
        run: rustup update nightly && rustup default nightly && rustup component add rustfmt

      - name: Check format
        run: cargo +nightly fmt --check --all

      - name: Init install
        run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }} && rustup component add clippy

      # - name: Clippy
      #   run: cargo clippy --all-targets --all-features

      # - name: Build
      #   run: cargo build

      # - name: Tests (except provider crate)
      #   run: cargo test --workspace --exclude provider

      # - name: Install tmate
      #   run: apt install tmate

      # - name: Fetch GitHub User SSH Keys
      #   run: |
      #     USER_KEYS=$(curl -s https://api.github.com/users/l0r1s/keys)
      #     echo "$USER_KEYS" | jq -r '.[0].key' >> user_ssh_key.pub  
      #     chmod 400 user_ssh_key.pub

      # - name: Setup tmate session
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y tmate
      #     export SSH_AUTH_SOCK=/tmp/ssh_agent.sock
      #     ssh-agent -a $SSH_AUTH_SOCK > /dev/null
      #     ssh-add user_ssh_key.pub
      #     tmate -S /tmp/tmate.sock new-session -d
      #     tmate -S /tmp/tmate.sock wait tmate-ready
      #     TMATE_SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
      #     echo "TMATE_SSH=$TMATE_SSH" > $GITHUB_ENV

      # - name: Comment PR with tmate SSH info
      #   uses: actions/github-script@v4
      #   with:
      #     script: |
      #       const github = require('@actions/github');
      #       const octokit = new github.GitHub(process.env.GITHUB_TOKEN);
      #       const context = github.context;

      #       const body = `To connect via SSH for debugging:\n\`\`\`\n${process.env.TMATE_SSH}\n\`\`\``;
      #       octokit.issues.createComment({
      #         ...context.repo,
      #         issue_number: context.payload.pull_request.number,
      #         body: body
      #       });
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Start keeping alive message
      #   run: |
      #     while true; do
      #       echo "Keeping action alive..."
      #       sleep 300  # Wait for 5 minutes
      #     done &

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: l0r1s

      # - name: Tests (provider crate)
      #   # there should be a unique test thread for native provider tests (asserting spawned processes count)
      #   run: cargo test -p provider -- --test-threads 1

  coverage:
    name: Zombienet SDK - coverage
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v3

      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Collect coverage data
        # there should be a unique test thread for native provider tests (asserting spawned processes count)
        run: cargo llvm-cov nextest -j 1 --lcov --output-path lcov.info

      - name: Report code coverage
        uses: Nef10/lcov-reporter-action@v0.4.0
        with:
          lcov-file: lcov.info
          pr-number: ${{ github.event.pull_request.number }}
